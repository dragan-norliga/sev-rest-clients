# coding: utf-8

"""
    Sev Data flex API v1.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustInstallation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'move_in_date': 'datetime',
        'move_on_date': 'datetime',
        'inst_id': 'int',
        'inst_nickname': 'str',
        'address': 'str',
        'floor': 'str',
        'postal_code': 'str',
        'postal_district': 'str',
        'tarif_number': 'int',
        'billing_type': 'str',
        'meters': 'list[CustMeter]'
    }

    attribute_map = {
        'move_in_date': 'move_in_date',
        'move_on_date': 'move_on_date',
        'inst_id': 'inst_id',
        'inst_nickname': 'inst_nickname',
        'address': 'address',
        'floor': 'floor',
        'postal_code': 'postal_code',
        'postal_district': 'postal_district',
        'tarif_number': 'tarif_number',
        'billing_type': 'billing_type',
        'meters': 'meters'
    }

    def __init__(self, move_in_date=None, move_on_date=None, inst_id=None, inst_nickname=None, address=None, floor=None, postal_code=None, postal_district=None, tarif_number=None, billing_type=None, meters=None):  # noqa: E501
        """CustInstallation - a model defined in Swagger"""  # noqa: E501
        self._move_in_date = None
        self._move_on_date = None
        self._inst_id = None
        self._inst_nickname = None
        self._address = None
        self._floor = None
        self._postal_code = None
        self._postal_district = None
        self._tarif_number = None
        self._billing_type = None
        self._meters = None
        self.discriminator = None
        if move_in_date is not None:
            self.move_in_date = move_in_date
        if move_on_date is not None:
            self.move_on_date = move_on_date
        if inst_id is not None:
            self.inst_id = inst_id
        if inst_nickname is not None:
            self.inst_nickname = inst_nickname
        if address is not None:
            self.address = address
        if floor is not None:
            self.floor = floor
        if postal_code is not None:
            self.postal_code = postal_code
        if postal_district is not None:
            self.postal_district = postal_district
        if tarif_number is not None:
            self.tarif_number = tarif_number
        if billing_type is not None:
            self.billing_type = billing_type
        if meters is not None:
            self.meters = meters

    @property
    def move_in_date(self):
        """Gets the move_in_date of this CustInstallation.  # noqa: E501


        :return: The move_in_date of this CustInstallation.  # noqa: E501
        :rtype: datetime
        """
        return self._move_in_date

    @move_in_date.setter
    def move_in_date(self, move_in_date):
        """Sets the move_in_date of this CustInstallation.


        :param move_in_date: The move_in_date of this CustInstallation.  # noqa: E501
        :type: datetime
        """

        self._move_in_date = move_in_date

    @property
    def move_on_date(self):
        """Gets the move_on_date of this CustInstallation.  # noqa: E501


        :return: The move_on_date of this CustInstallation.  # noqa: E501
        :rtype: datetime
        """
        return self._move_on_date

    @move_on_date.setter
    def move_on_date(self, move_on_date):
        """Sets the move_on_date of this CustInstallation.


        :param move_on_date: The move_on_date of this CustInstallation.  # noqa: E501
        :type: datetime
        """

        self._move_on_date = move_on_date

    @property
    def inst_id(self):
        """Gets the inst_id of this CustInstallation.  # noqa: E501


        :return: The inst_id of this CustInstallation.  # noqa: E501
        :rtype: int
        """
        return self._inst_id

    @inst_id.setter
    def inst_id(self, inst_id):
        """Sets the inst_id of this CustInstallation.


        :param inst_id: The inst_id of this CustInstallation.  # noqa: E501
        :type: int
        """

        self._inst_id = inst_id

    @property
    def inst_nickname(self):
        """Gets the inst_nickname of this CustInstallation.  # noqa: E501


        :return: The inst_nickname of this CustInstallation.  # noqa: E501
        :rtype: str
        """
        return self._inst_nickname

    @inst_nickname.setter
    def inst_nickname(self, inst_nickname):
        """Sets the inst_nickname of this CustInstallation.


        :param inst_nickname: The inst_nickname of this CustInstallation.  # noqa: E501
        :type: str
        """

        self._inst_nickname = inst_nickname

    @property
    def address(self):
        """Gets the address of this CustInstallation.  # noqa: E501


        :return: The address of this CustInstallation.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CustInstallation.


        :param address: The address of this CustInstallation.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def floor(self):
        """Gets the floor of this CustInstallation.  # noqa: E501


        :return: The floor of this CustInstallation.  # noqa: E501
        :rtype: str
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this CustInstallation.


        :param floor: The floor of this CustInstallation.  # noqa: E501
        :type: str
        """

        self._floor = floor

    @property
    def postal_code(self):
        """Gets the postal_code of this CustInstallation.  # noqa: E501


        :return: The postal_code of this CustInstallation.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CustInstallation.


        :param postal_code: The postal_code of this CustInstallation.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def postal_district(self):
        """Gets the postal_district of this CustInstallation.  # noqa: E501


        :return: The postal_district of this CustInstallation.  # noqa: E501
        :rtype: str
        """
        return self._postal_district

    @postal_district.setter
    def postal_district(self, postal_district):
        """Sets the postal_district of this CustInstallation.


        :param postal_district: The postal_district of this CustInstallation.  # noqa: E501
        :type: str
        """

        self._postal_district = postal_district

    @property
    def tarif_number(self):
        """Gets the tarif_number of this CustInstallation.  # noqa: E501


        :return: The tarif_number of this CustInstallation.  # noqa: E501
        :rtype: int
        """
        return self._tarif_number

    @tarif_number.setter
    def tarif_number(self, tarif_number):
        """Sets the tarif_number of this CustInstallation.


        :param tarif_number: The tarif_number of this CustInstallation.  # noqa: E501
        :type: int
        """

        self._tarif_number = tarif_number

    @property
    def billing_type(self):
        """Gets the billing_type of this CustInstallation.  # noqa: E501


        :return: The billing_type of this CustInstallation.  # noqa: E501
        :rtype: str
        """
        return self._billing_type

    @billing_type.setter
    def billing_type(self, billing_type):
        """Sets the billing_type of this CustInstallation.


        :param billing_type: The billing_type of this CustInstallation.  # noqa: E501
        :type: str
        """

        self._billing_type = billing_type

    @property
    def meters(self):
        """Gets the meters of this CustInstallation.  # noqa: E501


        :return: The meters of this CustInstallation.  # noqa: E501
        :rtype: list[CustMeter]
        """
        return self._meters

    @meters.setter
    def meters(self, meters):
        """Sets the meters of this CustInstallation.


        :param meters: The meters of this CustInstallation.  # noqa: E501
        :type: list[CustMeter]
        """

        self._meters = meters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustInstallation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustInstallation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
