# coding: utf-8

"""
    Sev Data flex API v1.0

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustMeter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'meter_id': 'int',
        'meter_nickname': 'object',
        'serial_number': 'str',
        'meter_name': 'str',
        'meter_type': 'str',
        'install_date': 'str',
        'removal_date': 'str'
    }

    attribute_map = {
        'meter_id': 'meter_id',
        'meter_nickname': 'meter_nickname',
        'serial_number': 'serial_number',
        'meter_name': 'meter_name',
        'meter_type': 'meter_type',
        'install_date': 'install_date',
        'removal_date': 'removal_date'
    }

    def __init__(self, meter_id=None, meter_nickname=None, serial_number=None, meter_name=None, meter_type=None, install_date=None, removal_date=None):  # noqa: E501
        """CustMeter - a model defined in Swagger"""  # noqa: E501
        self._meter_id = None
        self._meter_nickname = None
        self._serial_number = None
        self._meter_name = None
        self._meter_type = None
        self._install_date = None
        self._removal_date = None
        self.discriminator = None
        if meter_id is not None:
            self.meter_id = meter_id
        if meter_nickname is not None:
            self.meter_nickname = meter_nickname
        if serial_number is not None:
            self.serial_number = serial_number
        if meter_name is not None:
            self.meter_name = meter_name
        if meter_type is not None:
            self.meter_type = meter_type
        if install_date is not None:
            self.install_date = install_date
        if removal_date is not None:
            self.removal_date = removal_date

    @property
    def meter_id(self):
        """Gets the meter_id of this CustMeter.  # noqa: E501


        :return: The meter_id of this CustMeter.  # noqa: E501
        :rtype: int
        """
        return self._meter_id

    @meter_id.setter
    def meter_id(self, meter_id):
        """Sets the meter_id of this CustMeter.


        :param meter_id: The meter_id of this CustMeter.  # noqa: E501
        :type: int
        """

        self._meter_id = meter_id

    @property
    def meter_nickname(self):
        """Gets the meter_nickname of this CustMeter.  # noqa: E501


        :return: The meter_nickname of this CustMeter.  # noqa: E501
        :rtype: object
        """
        return self._meter_nickname

    @meter_nickname.setter
    def meter_nickname(self, meter_nickname):
        """Sets the meter_nickname of this CustMeter.


        :param meter_nickname: The meter_nickname of this CustMeter.  # noqa: E501
        :type: object
        """

        self._meter_nickname = meter_nickname

    @property
    def serial_number(self):
        """Gets the serial_number of this CustMeter.  # noqa: E501


        :return: The serial_number of this CustMeter.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CustMeter.


        :param serial_number: The serial_number of this CustMeter.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def meter_name(self):
        """Gets the meter_name of this CustMeter.  # noqa: E501


        :return: The meter_name of this CustMeter.  # noqa: E501
        :rtype: str
        """
        return self._meter_name

    @meter_name.setter
    def meter_name(self, meter_name):
        """Sets the meter_name of this CustMeter.


        :param meter_name: The meter_name of this CustMeter.  # noqa: E501
        :type: str
        """

        self._meter_name = meter_name

    @property
    def meter_type(self):
        """Gets the meter_type of this CustMeter.  # noqa: E501


        :return: The meter_type of this CustMeter.  # noqa: E501
        :rtype: str
        """
        return self._meter_type

    @meter_type.setter
    def meter_type(self, meter_type):
        """Sets the meter_type of this CustMeter.


        :param meter_type: The meter_type of this CustMeter.  # noqa: E501
        :type: str
        """

        self._meter_type = meter_type

    @property
    def install_date(self):
        """Gets the install_date of this CustMeter.  # noqa: E501


        :return: The install_date of this CustMeter.  # noqa: E501
        :rtype: str
        """
        return self._install_date

    @install_date.setter
    def install_date(self, install_date):
        """Sets the install_date of this CustMeter.


        :param install_date: The install_date of this CustMeter.  # noqa: E501
        :type: str
        """

        self._install_date = install_date

    @property
    def removal_date(self):
        """Gets the removal_date of this CustMeter.  # noqa: E501


        :return: The removal_date of this CustMeter.  # noqa: E501
        :rtype: str
        """
        return self._removal_date

    @removal_date.setter
    def removal_date(self, removal_date):
        """Sets the removal_date of this CustMeter.


        :param removal_date: The removal_date of this CustMeter.  # noqa: E501
        :type: str
        """

        self._removal_date = removal_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustMeter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustMeter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
