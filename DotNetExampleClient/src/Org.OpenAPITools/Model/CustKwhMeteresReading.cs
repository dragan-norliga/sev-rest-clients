/*
 * Sev Data flex API v1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustKwhMeteresReading
    /// </summary>
    [DataContract(Name = "CustKwhMeteresReading")]
    public partial class CustKwhMeteresReading : IEquatable<CustKwhMeteresReading>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustKwhMeteresReading" /> class.
        /// </summary>
        /// <param name="meterId">meterId.</param>
        /// <param name="readings">readings.</param>
        public CustKwhMeteresReading(string meterId = default(string), List<CustKwhReading> readings = default(List<CustKwhReading>))
        {
            this.MeterId = meterId;
            this.Readings = readings;
        }

        /// <summary>
        /// Gets or Sets MeterId
        /// </summary>
        [DataMember(Name = "meter_id", EmitDefaultValue = true)]
        public string MeterId { get; set; }

        /// <summary>
        /// Gets or Sets Readings
        /// </summary>
        [DataMember(Name = "readings", EmitDefaultValue = true)]
        public List<CustKwhReading> Readings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustKwhMeteresReading {\n");
            sb.Append("  MeterId: ").Append(MeterId).Append("\n");
            sb.Append("  Readings: ").Append(Readings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustKwhMeteresReading);
        }

        /// <summary>
        /// Returns true if CustKwhMeteresReading instances are equal
        /// </summary>
        /// <param name="input">Instance of CustKwhMeteresReading to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustKwhMeteresReading input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MeterId == input.MeterId ||
                    (this.MeterId != null &&
                    this.MeterId.Equals(input.MeterId))
                ) && 
                (
                    this.Readings == input.Readings ||
                    this.Readings != null &&
                    input.Readings != null &&
                    this.Readings.SequenceEqual(input.Readings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MeterId != null)
                {
                    hashCode = (hashCode * 59) + this.MeterId.GetHashCode();
                }
                if (this.Readings != null)
                {
                    hashCode = (hashCode * 59) + this.Readings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
