/*
 * Sev Data flex API v1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustInstallation
    /// </summary>
    [DataContract(Name = "CustInstallation")]
    public partial class CustInstallation : IEquatable<CustInstallation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustInstallation" /> class.
        /// </summary>
        /// <param name="moveInDate">moveInDate.</param>
        /// <param name="moveOnDate">moveOnDate.</param>
        /// <param name="instId">instId.</param>
        /// <param name="instNickname">instNickname.</param>
        /// <param name="address">address.</param>
        /// <param name="floor">floor.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="postalDistrict">postalDistrict.</param>
        /// <param name="tarifNumber">tarifNumber.</param>
        /// <param name="billingType">billingType.</param>
        /// <param name="meters">meters.</param>
        public CustInstallation(DateTime moveInDate = default(DateTime), DateTime? moveOnDate = default(DateTime?), int instId = default(int), string instNickname = default(string), string address = default(string), string floor = default(string), string postalCode = default(string), string postalDistrict = default(string), int tarifNumber = default(int), string billingType = default(string), List<CustMeter> meters = default(List<CustMeter>))
        {
            this.MoveInDate = moveInDate;
            this.MoveOnDate = moveOnDate;
            this.InstId = instId;
            this.InstNickname = instNickname;
            this.Address = address;
            this.Floor = floor;
            this.PostalCode = postalCode;
            this.PostalDistrict = postalDistrict;
            this.TarifNumber = tarifNumber;
            this.BillingType = billingType;
            this.Meters = meters;
        }

        /// <summary>
        /// Gets or Sets MoveInDate
        /// </summary>
        [DataMember(Name = "move_in_date", EmitDefaultValue = false)]
        public DateTime MoveInDate { get; set; }

        /// <summary>
        /// Gets or Sets MoveOnDate
        /// </summary>
        [DataMember(Name = "move_on_date", EmitDefaultValue = true)]
        public DateTime? MoveOnDate { get; set; }

        /// <summary>
        /// Gets or Sets InstId
        /// </summary>
        [DataMember(Name = "inst_id", EmitDefaultValue = false)]
        public int InstId { get; set; }

        /// <summary>
        /// Gets or Sets InstNickname
        /// </summary>
        [DataMember(Name = "inst_nickname", EmitDefaultValue = true)]
        public string InstNickname { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Floor
        /// </summary>
        [DataMember(Name = "floor", EmitDefaultValue = true)]
        public string Floor { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postal_code", EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets PostalDistrict
        /// </summary>
        [DataMember(Name = "postal_district", EmitDefaultValue = true)]
        public string PostalDistrict { get; set; }

        /// <summary>
        /// Gets or Sets TarifNumber
        /// </summary>
        [DataMember(Name = "tarif_number", EmitDefaultValue = false)]
        public int TarifNumber { get; set; }

        /// <summary>
        /// Gets or Sets BillingType
        /// </summary>
        [DataMember(Name = "billing_type", EmitDefaultValue = true)]
        public string BillingType { get; set; }

        /// <summary>
        /// Gets or Sets Meters
        /// </summary>
        [DataMember(Name = "meters", EmitDefaultValue = true)]
        public List<CustMeter> Meters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustInstallation {\n");
            sb.Append("  MoveInDate: ").Append(MoveInDate).Append("\n");
            sb.Append("  MoveOnDate: ").Append(MoveOnDate).Append("\n");
            sb.Append("  InstId: ").Append(InstId).Append("\n");
            sb.Append("  InstNickname: ").Append(InstNickname).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Floor: ").Append(Floor).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  PostalDistrict: ").Append(PostalDistrict).Append("\n");
            sb.Append("  TarifNumber: ").Append(TarifNumber).Append("\n");
            sb.Append("  BillingType: ").Append(BillingType).Append("\n");
            sb.Append("  Meters: ").Append(Meters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustInstallation);
        }

        /// <summary>
        /// Returns true if CustInstallation instances are equal
        /// </summary>
        /// <param name="input">Instance of CustInstallation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustInstallation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MoveInDate == input.MoveInDate ||
                    (this.MoveInDate != null &&
                    this.MoveInDate.Equals(input.MoveInDate))
                ) && 
                (
                    this.MoveOnDate == input.MoveOnDate ||
                    (this.MoveOnDate != null &&
                    this.MoveOnDate.Equals(input.MoveOnDate))
                ) && 
                (
                    this.InstId == input.InstId ||
                    this.InstId.Equals(input.InstId)
                ) && 
                (
                    this.InstNickname == input.InstNickname ||
                    (this.InstNickname != null &&
                    this.InstNickname.Equals(input.InstNickname))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Floor == input.Floor ||
                    (this.Floor != null &&
                    this.Floor.Equals(input.Floor))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.PostalDistrict == input.PostalDistrict ||
                    (this.PostalDistrict != null &&
                    this.PostalDistrict.Equals(input.PostalDistrict))
                ) && 
                (
                    this.TarifNumber == input.TarifNumber ||
                    this.TarifNumber.Equals(input.TarifNumber)
                ) && 
                (
                    this.BillingType == input.BillingType ||
                    (this.BillingType != null &&
                    this.BillingType.Equals(input.BillingType))
                ) && 
                (
                    this.Meters == input.Meters ||
                    this.Meters != null &&
                    input.Meters != null &&
                    this.Meters.SequenceEqual(input.Meters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MoveInDate != null)
                {
                    hashCode = (hashCode * 59) + this.MoveInDate.GetHashCode();
                }
                if (this.MoveOnDate != null)
                {
                    hashCode = (hashCode * 59) + this.MoveOnDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstId.GetHashCode();
                if (this.InstNickname != null)
                {
                    hashCode = (hashCode * 59) + this.InstNickname.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Floor != null)
                {
                    hashCode = (hashCode * 59) + this.Floor.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.PostalDistrict != null)
                {
                    hashCode = (hashCode * 59) + this.PostalDistrict.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TarifNumber.GetHashCode();
                if (this.BillingType != null)
                {
                    hashCode = (hashCode * 59) + this.BillingType.GetHashCode();
                }
                if (this.Meters != null)
                {
                    hashCode = (hashCode * 59) + this.Meters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
