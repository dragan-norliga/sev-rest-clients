/*
 * Sev Data flex API v1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustomerWithInstallations
    /// </summary>
    [DataContract(Name = "CustomerWithInstallations")]
    public partial class CustomerWithInstallations : IEquatable<CustomerWithInstallations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerWithInstallations" /> class.
        /// </summary>
        /// <param name="customerName">customerName.</param>
        /// <param name="installations">installations.</param>
        public CustomerWithInstallations(string customerName = default(string), List<CustInstallation> installations = default(List<CustInstallation>))
        {
            this.CustomerName = customerName;
            this.Installations = installations;
        }

        /// <summary>
        /// Gets or Sets CustomerName
        /// </summary>
        [DataMember(Name = "customer_name", EmitDefaultValue = true)]
        public string CustomerName { get; set; }

        /// <summary>
        /// Gets or Sets Installations
        /// </summary>
        [DataMember(Name = "installations", EmitDefaultValue = true)]
        public List<CustInstallation> Installations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerWithInstallations {\n");
            sb.Append("  CustomerName: ").Append(CustomerName).Append("\n");
            sb.Append("  Installations: ").Append(Installations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerWithInstallations);
        }

        /// <summary>
        /// Returns true if CustomerWithInstallations instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerWithInstallations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerWithInstallations input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CustomerName == input.CustomerName ||
                    (this.CustomerName != null &&
                    this.CustomerName.Equals(input.CustomerName))
                ) && 
                (
                    this.Installations == input.Installations ||
                    this.Installations != null &&
                    input.Installations != null &&
                    this.Installations.SequenceEqual(input.Installations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerName != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerName.GetHashCode();
                }
                if (this.Installations != null)
                {
                    hashCode = (hashCode * 59) + this.Installations.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
