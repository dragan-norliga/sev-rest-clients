/*
 * Sev Data flex API v1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustKwhReading
    /// </summary>
    [DataContract(Name = "CustKwhReading")]
    public partial class CustKwhReading : IEquatable<CustKwhReading>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustKwhReading" /> class.
        /// </summary>
        /// <param name="timeStamp">timeStamp.</param>
        /// <param name="reading">reading.</param>
        /// <param name="cumulativeValue">cumulativeValue.</param>
        /// <param name="unit">unit.</param>
        public CustKwhReading(DateTime timeStamp = default(DateTime), double reading = default(double), double? cumulativeValue = default(double?), string unit = default(string))
        {
            this.TimeStamp = timeStamp;
            this.Reading = reading;
            this.CumulativeValue = cumulativeValue;
            this.Unit = unit;
        }

        /// <summary>
        /// Gets or Sets TimeStamp
        /// </summary>
        [DataMember(Name = "time_stamp", EmitDefaultValue = false)]
        public DateTime TimeStamp { get; set; }

        /// <summary>
        /// Gets or Sets Reading
        /// </summary>
        [DataMember(Name = "reading", EmitDefaultValue = false)]
        public double Reading { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeValue
        /// </summary>
        [DataMember(Name = "cumulative_value", EmitDefaultValue = true)]
        public double? CumulativeValue { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = true)]
        public string Unit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustKwhReading {\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  Reading: ").Append(Reading).Append("\n");
            sb.Append("  CumulativeValue: ").Append(CumulativeValue).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustKwhReading);
        }

        /// <summary>
        /// Returns true if CustKwhReading instances are equal
        /// </summary>
        /// <param name="input">Instance of CustKwhReading to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustKwhReading input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TimeStamp == input.TimeStamp ||
                    (this.TimeStamp != null &&
                    this.TimeStamp.Equals(input.TimeStamp))
                ) && 
                (
                    this.Reading == input.Reading ||
                    this.Reading.Equals(input.Reading)
                ) && 
                (
                    this.CumulativeValue == input.CumulativeValue ||
                    (this.CumulativeValue != null &&
                    this.CumulativeValue.Equals(input.CumulativeValue))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimeStamp != null)
                {
                    hashCode = (hashCode * 59) + this.TimeStamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Reading.GetHashCode();
                if (this.CumulativeValue != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeValue.GetHashCode();
                }
                if (this.Unit != null)
                {
                    hashCode = (hashCode * 59) + this.Unit.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
