/*
 * Sev Data flex API v1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CustMeter
    /// </summary>
    [DataContract(Name = "CustMeter")]
    public partial class CustMeter : IEquatable<CustMeter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustMeter" /> class.
        /// </summary>
        /// <param name="meterId">meterId.</param>
        /// <param name="meterNickname">meterNickname.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="meterName">meterName.</param>
        /// <param name="meterType">meterType.</param>
        /// <param name="installDate">installDate.</param>
        /// <param name="removalDate">removalDate.</param>
        public CustMeter(int meterId = default(int), Object meterNickname = default(Object), string serialNumber = default(string), string meterName = default(string), string meterType = default(string), string installDate = default(string), string removalDate = default(string))
        {
            this.MeterId = meterId;
            this.MeterNickname = meterNickname;
            this.SerialNumber = serialNumber;
            this.MeterName = meterName;
            this.MeterType = meterType;
            this.InstallDate = installDate;
            this.RemovalDate = removalDate;
        }

        /// <summary>
        /// Gets or Sets MeterId
        /// </summary>
        [DataMember(Name = "meter_id", EmitDefaultValue = false)]
        public int MeterId { get; set; }

        /// <summary>
        /// Gets or Sets MeterNickname
        /// </summary>
        [DataMember(Name = "meter_nickname", EmitDefaultValue = true)]
        public Object MeterNickname { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name = "serial_number", EmitDefaultValue = true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets MeterName
        /// </summary>
        [DataMember(Name = "meter_name", EmitDefaultValue = true)]
        public string MeterName { get; set; }

        /// <summary>
        /// Gets or Sets MeterType
        /// </summary>
        [DataMember(Name = "meter_type", EmitDefaultValue = true)]
        public string MeterType { get; set; }

        /// <summary>
        /// Gets or Sets InstallDate
        /// </summary>
        [DataMember(Name = "install_date", EmitDefaultValue = true)]
        public string InstallDate { get; set; }

        /// <summary>
        /// Gets or Sets RemovalDate
        /// </summary>
        [DataMember(Name = "removal_date", EmitDefaultValue = true)]
        public string RemovalDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustMeter {\n");
            sb.Append("  MeterId: ").Append(MeterId).Append("\n");
            sb.Append("  MeterNickname: ").Append(MeterNickname).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  MeterName: ").Append(MeterName).Append("\n");
            sb.Append("  MeterType: ").Append(MeterType).Append("\n");
            sb.Append("  InstallDate: ").Append(InstallDate).Append("\n");
            sb.Append("  RemovalDate: ").Append(RemovalDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustMeter);
        }

        /// <summary>
        /// Returns true if CustMeter instances are equal
        /// </summary>
        /// <param name="input">Instance of CustMeter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustMeter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MeterId == input.MeterId ||
                    this.MeterId.Equals(input.MeterId)
                ) && 
                (
                    this.MeterNickname == input.MeterNickname ||
                    (this.MeterNickname != null &&
                    this.MeterNickname.Equals(input.MeterNickname))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.MeterName == input.MeterName ||
                    (this.MeterName != null &&
                    this.MeterName.Equals(input.MeterName))
                ) && 
                (
                    this.MeterType == input.MeterType ||
                    (this.MeterType != null &&
                    this.MeterType.Equals(input.MeterType))
                ) && 
                (
                    this.InstallDate == input.InstallDate ||
                    (this.InstallDate != null &&
                    this.InstallDate.Equals(input.InstallDate))
                ) && 
                (
                    this.RemovalDate == input.RemovalDate ||
                    (this.RemovalDate != null &&
                    this.RemovalDate.Equals(input.RemovalDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MeterId.GetHashCode();
                if (this.MeterNickname != null)
                {
                    hashCode = (hashCode * 59) + this.MeterNickname.GetHashCode();
                }
                if (this.SerialNumber != null)
                {
                    hashCode = (hashCode * 59) + this.SerialNumber.GetHashCode();
                }
                if (this.MeterName != null)
                {
                    hashCode = (hashCode * 59) + this.MeterName.GetHashCode();
                }
                if (this.MeterType != null)
                {
                    hashCode = (hashCode * 59) + this.MeterType.GetHashCode();
                }
                if (this.InstallDate != null)
                {
                    hashCode = (hashCode * 59) + this.InstallDate.GetHashCode();
                }
                if (this.RemovalDate != null)
                {
                    hashCode = (hashCode * 59) + this.RemovalDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
