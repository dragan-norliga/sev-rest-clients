/*
 * Sev Data flex API v1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;
using System.Threading.Tasks;
using System.Text.Json;
using Xunit.Abstractions;
using System.Globalization;

// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing CustomerRESTApiApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CustomerRESTApiApiTests : IDisposable
    {
        private CustomerRESTApiApi instance;
        private readonly ITestOutputHelper output;


        public CustomerRESTApiApiTests(ITestOutputHelper output)
        {
            this.output = output;
            // instantiate the REST API client
            instance = new CustomerRESTApiApi(
                //"https://localhost:44346"
                "https://api.sev.fo/"
            );

            // Get the token
            var httpRes = instance.ApiCustomerRESTApiLoginAndGetJwtTokenPostWithHttpInfoAsync(new LoginInput
            {
                UserName = "Put your REST API User ID!",
                Password = "You REST API Key!"
            });
            var Token = httpRes.GetAwaiter().GetResult().Data;

            // put the token in the configuration so that it is automatically attached
            instance.Configuration = new Configuration
            {
                ApiKeyPrefix = { { "Authorization", $"Bearer {Token}" } },
            };
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CustomerRESTApiApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<CustomerRESTApiApi>(instance);
        }

        /// <summary>
        /// Test ApiCustomerRESTApiGetAvailableMetersPostTest
        /// </summary>
        [Fact]
        public async Task ApiCustomerRESTApiGetAvailableMetersPostAsyncTest()
        {
            var response = await instance.ApiCustomerRESTApiGetAvailableMetersPostAsync();
            Assert.IsType<List<CustomerWithInstallations>>(response);
            output.WriteLine(JsonSerializer.Serialize(response));
        }

        [Fact]
        public async Task ApiCustomerRESTApiEstimatedCO2PostAsyncTest()
        {
            var response = await instance.ApiCustomerRESTApiEstimatedCO2PostAsync(
                new FilterCustKwhMeteresReading
                {
                    FromDate = DateTime.ParseExact("2023-08-25 00:00:00", "yyyy-MM-dd HH:mm:ss",
                    CultureInfo.InvariantCulture),
                    ToDate = DateTime.ParseExact("2023-08-26 00:00:00", "yyyy-MM-dd HH:mm:ss",
                    CultureInfo.InvariantCulture),
                    Meters = new List<int> { 33343, 44377 } // Put your meters here
                }
            );
            Assert.IsType<List<CustKwhMeteresReading>>(response);
            output.WriteLine(JsonSerializer.Serialize(response));
        }

        [Fact]
        public async Task ApiCustomerRESTApiHourlyKwhUsagePostAsyncTest()
        {
            var response = await instance.ApiCustomerRESTApiHourlyKwhUsagePostAsync(
                new FilterCustKwhMeteresReading
                {
                    FromDate = DateTime.ParseExact("2023-08-25 00:00:00", "yyyy-MM-dd HH:mm:ss",
                    CultureInfo.InvariantCulture),
                    ToDate = DateTime.ParseExact("2023-08-26 00:00:00", "yyyy-MM-dd HH:mm:ss",
                    CultureInfo.InvariantCulture),
                    Meters = new List<int> { 33343, 44377 } // Put your meters here
                }
            );
            Assert.IsType<List<CustKwhMeteresReading>>(response);
            output.WriteLine(JsonSerializer.Serialize(response));
        }

        [Fact]
        public async Task ApiCustomerRESTApiEstimatedCostPostAsyncTest()
        {
            var response = await instance.ApiCustomerRESTApiEstimatedCostPostAsync(
                new FilterCustKwhMeteresReading
                {
                    FromDate = DateTime.ParseExact("2023-08-25 00:00:00", "yyyy-MM-dd HH:mm:ss",
                    CultureInfo.InvariantCulture),
                    ToDate = DateTime.ParseExact("2023-08-26 00:00:00", "yyyy-MM-dd HH:mm:ss",
                    CultureInfo.InvariantCulture),
                    Meters = new List<int> { 33343, 44377 } // Put your meters here
                }
            );
            Assert.IsType<List<EsitmatedCostPerMeter>>(response);
            output.WriteLine(JsonSerializer.Serialize(response));
        }

        [Fact]
        public async Task ApiCustomerRESTApiRefreshJwtKeyTokenPostWithHttpInfoAsyncTest()
        {
            var response = await instance.ApiCustomerRESTApiRefreshJwtKeyTokenPostWithHttpInfoAsync();
            output.WriteLine(response.Data.ToString());
            var Token = response.Data.ToString();

            // put the token in the configuration so that it is automatically attached
            instance.Configuration = new Configuration
            {
                ApiKeyPrefix = { { "Authorization", $"Bearer {Token}" } },
            };

            // try to execute a REST Method with the new Token
            var res = await instance.ApiCustomerRESTApiHourlyKwhUsagePostAsync(
                          new FilterCustKwhMeteresReading
                          {
                              FromDate = DateTime.ParseExact("2023-08-25 00:00:00", "yyyy-MM-dd HH:mm:ss",
                              CultureInfo.InvariantCulture),
                              ToDate = DateTime.ParseExact("2023-08-26 00:00:00", "yyyy-MM-dd HH:mm:ss",
                              CultureInfo.InvariantCulture),
                              Meters = new List<int> { 33343, 44377 } // Put your meters here
                          }
                      );
            Assert.IsType<List<CustKwhMeteresReading>>(res);
            output.WriteLine(JsonSerializer.Serialize(res));
        }

    }
}
